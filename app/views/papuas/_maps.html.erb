

<div id="state-legend" class="legend">
    <h4>Results</h4>
    <div><span style="background-color: #fbb03b" class="circle"></span>PNG</div>
    <div><span style="background-color: #e55e5e" class="circle"></span>IND</div>
    <div><span style="background-color: #223b53" class="circle"></span>Solomon Islands</div>
    <h4 style="margin-top: 14px ">The Rest</h4>
    <div><span><img class="img" src="/school-JP_PNG.svg"></img></span>PNG</div>
    <div><span><img class="img" src="/school-JP_IND.svg"></img></span>IND</div>
    <div><span><img class="img" src="/school-JP_Solo.svg"></img></span>Solomon Islands</div>
  </div>

<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic2lsZW5jZWp0IiwiYSI6ImNrc2EwN3ZwNjB6NTcydXFxZ2N2bmRwNHcifQ.uxkpkzBwxIFOgqzEN_7bqA';
    var map = new mapboxgl.Map({
        container: 'map', // container ID
        style: 'mapbox://styles/mapbox/light-v10', // style URL
        center: [140.44268, -4.50417], // starting position [lng, lat]
        zoom: 4.75 // starting zoom
    });

    var lng_results = <%= raw @lng_results %>;
    var lat_results = <%= raw @lat_results %>;
    var name_results = <%= raw @name_results %>;
    var family_results = <%= raw @family_results %>;
    var country_results = <%= raw @country_results %>;

    var lng_other = <%= raw @lng_other %>;
    var lat_other = <%= raw @lat_other %>;
    var name_other = <%= raw @name_other %>;
    var family_other = <%= raw @family_other %>;
    var country_other = <%= raw @country_other %>;


    //Create GeoJSON Object
    var gj_results = {
      "name":"MyFeatureType",
      "type":"FeatureCollection",
      "features":[]
    };

    var gj_other = {
      "name":"MyFeatureType",
      "type":"FeatureCollection",
      "features":[]
    };

    // Get all location results
    for (let i = 0; i < lng_results.length; i++) {
      //var name = name_test[i]
      // Create an empty feature to store loaction
      gj_results.features.push({
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": []
        },
        "properties": {
          "description": `<strong>${name_results[i]}</strong><p>${family_results[i]}</P>`,
          "ethnicity": country_results[i]
        }
      });
      // 
      gj_results.features[i].geometry.coordinates.push(lng_results[i], lat_results[i]);
    };

    // Get all other rest locations
    for (let i = 0; i < lng_other.length; i++) {
      //var name = name_test[i]
      // Create an empty feature to store loaction
      gj_other.features.push({
        "type": "Feature",
        "geometry": {
          "type": "Point",
          "coordinates": []
        },
        "properties": {
          "description": `<strong>${name_other[i]}</strong><p>${family_other[i]}</P>`,
          "ethnicity": country_other[i],
          "icon": "za-provincial-2"
        }
      });
      // 
      gj_other.features[i].geometry.coordinates.push(lng_other[i], lat_other[i]);
    };

    map.on('load', () => {

      map.loadImage('/circle.png', (error, image) => {
		if (error) throw error;
		map.addImage('results-icon', image, { 'sdf': true });
		map.addSource('points_1', {
        	'type': 'geojson',
        	'data': gj_results
      	});
		map.addLayer({
			'id': 'circle_1',
			'source': 'points_1',
			//'source-layer': 'food_stores-8sw1vy',
			'type': 'symbol',
			'layout': {
				'icon-image': 'results-icon',
				'icon-size': 0.75,
				'icon-allow-overlap': true
			},
			'paint': {
				'icon-color': [
				'match', // Use the 'match' expression: https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
				['get', 'ethnicity'], // Use the result 'STORE_TYPE' property
				'PNG',
	            '#fbb03b',
	            'IND',
	            '#e55e5e',
	            '#223b53' // any other store type
				]
			}
			});
		});

      map.loadImage('/school-JP.png', (error, image) => {
		if (error) throw error;
		map.addImage('other-icon', image, { 'sdf': true });
		map.addSource('points_2', {
        	'type': 'geojson',
        	'data': gj_other
      	});
		map.addLayer({
			'id': 'circle_2',
			'source': 'points_2',
			//'source-layer': 'food_stores-8sw1vy',
			'type': 'symbol',
			'layout': {
				'icon-image': 'other-icon',
				'icon-size': 1,
				'icon-allow-overlap': true
			},
			'paint': {
				'icon-color': [
				'match', // Use the 'match' expression: https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-match
				['get', 'ethnicity'], // Use the result 'STORE_TYPE' property
				'PNG',
	            '#fbb03b',
	            'IND',
	            '#e55e5e',
	            '#223b53' // any other store type
				],
				'icon-opacity': 0.5
			}
			});
		});

      // map.addSource('points_2', {
      //   'type': 'geojson',
      //   'data': gj_other
      // });

      // add layer for the rest results first
      // map.addLayer({
      //   'id': 'circle_2',
      //   'type': 'symbol',
      //   'source': 'points_2',
      //   'layout': {
      //   	'icon-image': '{icon}',
      //   	'icon-allow-overlap': true
      //   },
      //   'paint': {
      //     'icon-color': [
      //       'match',
      //       ['get', 'ethnicity'],
      //       'PNG',
      //       '#fbb03b',
      //       'IND',
      //       '#e55e5e',
      //       '#223b53'
      //     ]
      // 	}
      // });
      // map.addLayer({
      //   'id': 'circle_2',
      //   'type': 'symbol',
      //   'source': 'points_2',
      //   'paint': {
      //     'circle-color': [
      //       'match',
      //       ['get', 'ethnicity'],
      //       'PNG',
      //       '#fbb03b',
      //       'IND',
      //       '#e55e5e',
      //       '#223b53'
      //     ],
      //     'circle-radius': 3,
      //     'circle-stroke-width': 0,
      //     'circle-stroke-color': '#223b53',
      //     'circle-opacity': 0.8,
      //     'circle-stroke-opacity': 0.8
      //   }
      // });

/*
      // Add a GeoJSON source with results points.
      map.addSource('points_2', {
        'type': 'geojson',
        'data': gj_other
      });
      // Add a circle layer
      map.addLayer({
        'id': 'circle_2',
        'type': 'circle',
        'source': 'points_2',
        'paint': {
          'circle-color': [
            'match',
            ['get', 'ethnicity'],
            'PNG',
            '#fbb03b',
            'IND',
            '#e55e5e',
            '#223b53'
          ],
          'circle-radius': 3,
          'circle-stroke-width': 1,
          'circle-stroke-color': '#223b53',
          'circle-opacity': 0.8,
          'circle-stroke-opacity': 0.8
        }
      });
*/
      

      // Create a popup, but don't add it to the map yet.
      const popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
      });
       
      // Center the map on the coordinates of any clicked circle from the 'circle' layer.
      map.on('click', 'circle_1', (e) => {
        map.flyTo({
          center: e.features[0].geometry.coordinates
        });
        map.getCanvas().style.cursor = 'pointer';

        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
         
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        // Click and then add popup to map
        new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setHTML(description)
          .addTo(map);
      });

      map.on('click', 'circle_2', (e) => {
        map.flyTo({
          center: e.features[0].geometry.coordinates
        });
        map.getCanvas().style.cursor = 'pointer';

        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
         
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        // Click and then add popup to map
        new mapboxgl.Popup()
          .setLngLat(coordinates)
          .setHTML(description)
          .addTo(map);
      });
       
      // Change the cursor to a pointer when the it enters a feature in the 'circle' layer.
      map.on('mouseenter', 'circle_1', (e) => {
        //map.getCanvas().style.cursor = 'pointer';

        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
         
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
         
        // Populate the popup and set its coordinates
        // based on the feature found.
        popup.setLngLat(coordinates).setHTML(description).addTo(map);
      });

      map.on('mouseenter', 'circle_2', (e) => {
        //map.getCanvas().style.cursor = 'pointer';

        // Copy coordinates array.
        const coordinates = e.features[0].geometry.coordinates.slice();
        const description = e.features[0].properties.description;
         
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
         
        // Populate the popup and set its coordinates
        // based on the feature found.
        popup.setLngLat(coordinates).setHTML(description).addTo(map);
      });
       
      // Change it back to a pointer when it leaves.
      map.on('mouseleave', 'circle_1', () => {
        map.getCanvas().style.cursor = '';
        popup.remove();
      });

      map.on('mouseleave', 'circle_2', () => {
        map.getCanvas().style.cursor = '';
        popup.remove();
      });
    });    
</script>